# Aloneallso-Android-SDK
Aloneallso-Android-SDK
import torch import torch.nn as nn class Conv2dTanh(nn.Module): def __init__(self, in_channels, out_channels, kernel_size, stride=(1, 1), padding=(0, 0), bias=True): super(Conv2dTanh, self).__init__() self.in_channels = in_channels self.out_channels = out_channels self.kernel_size = kernel_size self.stride = stride self.padding = padding self.bias = bias self.conv = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, stride=stride, padding=padding, bias=bias) def forward(self, x): """ Args: x: [N,C,H,W] """ o1 = self.conv(x) o2 = torch.tanh(o1) return o2 class Features(nn.Module): def __init__(self, padding): super(Features, self).__init__() self.padding = padding self.conv2dtanh1 = Conv2dTanh(in_channels=1, out_channels=6, kernel_size=5, padding=padding) self.avgpool1 = nn.AvgPool2d(kernel_size=2) self.conv2dtanh2 = Conv2dTanh(in_channels=6, out_channels=16, kernel_size=5) self.avgpool2 = nn.AvgPool2d(kernel_size=2) self.conv2dtanh3 = Conv2dTanh(in_channels=16, out_channels=120, kernel_size=5) def forward(self, x): """ Args: x: [N,1,H,W] """ o1 = self.conv2dtanh1(x) o2 = self.avgpool1(o1) o3 = self.conv2dtanh2(o2) o4 = self.avgpool2(o3) o5 = self.conv2dtanh3(o4) return o5 class Classifier(nn.Module): def __init__(self, num_classes): super(Classifier, self).__init__() self.num_classes = num_classes self.fc1 = nn.Linear(in_features=120, out_features=84) self.fc2 = nn.Linear(in_features=84, out_features=num_classes) def forward(self, x): """ Args: x: [N,120] """ o1 = self.fc1(x) o2 = torch.tanh(o1) o3 = self.fc2(o2) return o3 class LeNet5(nn.Module): def __init__(self, num_classes=10, padding=0): super(LeNet5, self).__init__() self.num_classes = num_classes self.padding = padding self.features = Features(padding=padding) self.flatten = nn.Flatten() self.classifier = Classifier(num_classes=num_classes) def forward(self, x): """ Args: x: [N,1,H,W] """ o1 = self.features(x) o2 = self.flatten(o1) o3 = self.classifier(o2) o4 = torch.log_softmax(o3, dim=-1) return o4
import torch
import torch.nn as nn


class Conv2dTanh(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, stride=(1, 1), padding=(0, 0), bias=True):
        super(Conv2dTanh, self).__init__()

        self.in_channels = in_channels
        self.out_channels = out_channels
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding
        self.bias = bias

        self.conv = nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, stride=stride, padding=padding, bias=bias)

    def forward(self, x):
        """
        Args:
            x: [N,C,H,W]
        """
        o1 = self.conv(x)
        o2 = torch.tanh(o1)
        return o2


class Features(nn.Module):
    def __init__(self, padding):
        super(Features, self).__init__()

        self.padding = padding

        self.conv2dtanh1 = Conv2dTanh(in_channels=1, out_channels=6, kernel_size=5, padding=padding)
        self.avgpool1 = nn.AvgPool2d(kernel_size=2)
        self.conv2dtanh2 = Conv2dTanh(in_channels=6, out_channels=16, kernel_size=5)
        self.avgpool2 = nn.AvgPool2d(kernel_size=2)
        self.conv2dtanh3 = Conv2dTanh(in_channels=16, out_channels=120, kernel_size=5)

    def forward(self, x):
        """
        Args:
            x: [N,1,H,W]
        """
        o1 = self.conv2dtanh1(x)
        o2 = self.avgpool1(o1)
        o3 = self.conv2dtanh2(o2)
        o4 = self.avgpool2(o3)
        o5 = self.conv2dtanh3(o4)
        return o5


class Classifier(nn.Module):
    def __init__(self, num_classes):
        super(Classifier, self).__init__()

        self.num_classes = num_classes

        self.fc1 = nn.Linear(in_features=120, out_features=84)
        self.fc2 = nn.Linear(in_features=84, out_features=num_classes)

    def forward(self, x):
        """
        Args:
            x: [N,120]
        """
        o1 = self.fc1(x)
        o2 = torch.tanh(o1)
        o3 = self.fc2(o2)
        return o3


class LeNet5(nn.Module):
    def __init__(self, num_classes=10, padding=0):
        super(LeNet5, self).__init__()

        self.num_classes = num_classes
        self.padding = padding

        self.features = Features(padding=padding)
        self.flatten = nn.Flatten()
        self.classifier = Classifier(num_classes=num_classes)

    def forward(self, x):
        """
        Args:
            x: [N,1,H,W]
        """
        o1 = self.features(x)
        o2 = self.flatten(o1)
        o3 = self.classifier(o2)
        o4 = torch.log_softmax(o3, dim=-1)
        return o4
Aloneallso-Android-SDK 
